#   Copyright (C) 2000 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Various utilities for scanning assembler output, used by gcc-dg.exp and
# g++-dg.exp.

# Utility for scanning compiler result, invoked via dg-final.
# Call pass if pattern is present, otherwise fail.
proc scan-assembler { pattern args } {
    # This assumes that we are two frames down from dg-test, and that
    # it still stores the filename of the testcase in a local variable "name".
    # A cleaner solution would require a new dejagnu release.
    set testcase [uplevel 2 { expr { $name } }]

    # This must match the rule in gcc-dg.exp.
    set output_file "[file rootname [file tail $testcase]].s"

    set fd [open $output_file r]
    set text [read $fd]
    close $fd

    set vmessage [concat $args]
    if { $vmessage == ""} {
	set vmessage $pattern
    }

    if [regexp -- $pattern $text] {
	pass "$testcase scan-assembler $vmessage"
    } else {
	fail "$testcase scan-assembler $vmessage"
    }
}

# Call pass if pattern is not present, otherwise fail.
proc scan-assembler-not { pattern args } {
    set testcase [uplevel 2 { expr { $name } }]
    set output_file "[file rootname [file tail $testcase]].s"

    set fd [open $output_file r]
    set text [read $fd]
    close $fd

    set vmessage [concat $args]
    if { $vmessage == ""} {
	set vmessage $pattern
    }

    if ![regexp -- $pattern $text] {
	pass "$testcase scan-assembler-not $vmessage"
    } else {
	fail "$testcase scan-assembler-not $vmessage"
    }
}

# Utility for scanning demangled compiler result, invoked via dg-final.
# Call pass if pattern is present, otherwise fail.
proc scan-assembler-dem { pattern args } {
    global cxxfilt
    global base_dir

    # Find c++filt like we find g++ in g++.exp.
    if ![info exists cxxfilt]  {
	set cxxfilt [findfile $base_dir/../c++filt $base_dir/../c++filt \
		     [findfile $base_dir/c++filt $base_dir/c++filt \
		      [transform c++filt]]]
	verbose -log "c++filt is $cxxfilt"
    }

    set testcase [uplevel 2 { expr { $name } }]
    set output_file "[file rootname [file tail $testcase]].s"

    set fd [open "| $cxxfilt < $output_file" r]
    set text [read $fd]
    close $fd

    set vmessage [concat $args]
    if { $vmessage == ""} {
	set vmessage $pattern
    }

    if [regexp -- $pattern $text] {
	pass "$testcase scan-assembler $vmessage"
    } else {
	fail "$testcase scan-assembler $vmessage"
    }
}

# Call pass if demangled pattern is not present, otherwise fail.
proc scan-assembler-dem-not { pattern args } {
    global cxxfilt
    global base_dir

    # Find c++filt like we find g++ in g++.exp.
    if ![info exists cxxfilt]  {
	set cxxfilt [findfile $base_dir/../c++filt $base_dir/../c++filt \
		     [findfile $base_dir/c++filt $base_dir/c++filt \
		      [transform c++filt]]]
	verbose -log "c++filt is $cxxfilt"
    }

    set testcase [uplevel 2 { expr { $name } }]
    set output_file "[file rootname [file tail $testcase]].s"

    set fd [open "| $cxxfilt < $output_file" r]
    set text [read $fd]
    close $fd

    set vmessage [concat $args]
    if { $vmessage == ""} {
	set vmessage $pattern
    }

    if ![regexp -- $pattern $text] {
	pass "$testcase scan-assembler-not $vmessage"
    } else {
	fail "$testcase scan-assembler-not $vmessage"
    }
}
